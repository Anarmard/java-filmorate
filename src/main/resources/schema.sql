create table if not exists RATING_MPA
(
    RATING_MPA_ID  INTEGER PRIMARY KEY,
    RATING_MPA_NAME CHARACTER VARYING(10) not null
);

create table if not exists GENRES
(
    GENRE_ID   INTEGER PRIMARY KEY,
    GENRE_NAME CHARACTER VARYING(30) not null
);


create table if not exists FILMS
(
    FILM_ID      INTEGER GENERATED by default AS IDENTITY PRIMARY KEY,
    FILM_NAME    CHARACTER VARYING(100) not null,
    DESCRIPTION  CHARACTER VARYING(300),
    RELEASE_DATE DATE,
    DURATION     INTEGER,
    RATE         INTEGER,
    RATING_MPA_ID   INTEGER REFERENCES RATING_MPA (RATING_MPA_ID)
);

create table if not exists FILMS_GENRES
(
    FILM_ID  INTEGER REFERENCES FILMS (FILM_ID),
    GENRE_ID INTEGER REFERENCES GENRES (GENRE_ID),
    constraint FILMS_GENRES_PK
        primary key (FILM_ID, GENRE_ID)
);

create table if not exists USERS
(
    USER_ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    USER_NAME CHARACTER VARYING(100),
    LOGIN     CHARACTER VARYING(50)  not null,
    EMAIL     CHARACTER VARYING(200) not null,
    BIRTHDAY  DATE,
    CONSTRAINT USERS_EMAIL_UNQ UNIQUE (EMAIL),
    CONSTRAINT USERS_LOGIN_UNQ UNIQUE (LOGIN)
);

create table if not exists FRIENDLISTS
(
    USER_ID   INTEGER REFERENCES USERS (USER_ID),
    FRIEND_ID INTEGER REFERENCES USERS (USER_ID),
    constraint FRIENDLISTS_PK
    primary key (USER_ID, FRIEND_ID),
    CONSTRAINT USERS_FRIENDS_UNQ UNIQUE (USER_ID, FRIEND_ID)
    );

create table if not exists LIKES
(
    FILM_ID INTEGER REFERENCES FILMS (FILM_ID),
    USER_ID INTEGER REFERENCES USERS (USER_ID),
    constraint LIKES_PK primary key (FILM_ID, USER_ID),
    constraint LIKES_FILM_USER_UNQ UNIQUE (FILM_ID , USER_ID)
    );


